//数字的二进制表示中1的个数

#include"stdafx.h"
#include<iostream>
using namespace std;

//注意：编程时尽可能用移位运算代替乘除法，，但是要注意负数时；

//思路1：n&1测试最后一位是否为1，重复n>>1，n&1测试其他为是否为1（while（n!=0））；--问题：n为负数时，右移高位补1,会陷入死循环；
//思路2：（1<<i）&n测试第i位是否为1，，，循环次数为 n 化为二进制的位数
//思路3：n &(n-1) 把从右往左第一个1置为0，，计算n变为0需要的次数，，，循环次数为：n有几个1，则需要循环多少次；
//注意：思路3中 n &(n-1) == 0，可以用来测试n是否是2的整次幂（==0，即二进制中只有一个1，为2的整次幂）

int  NumberOf1(int n) {
	int count_1 = 0;
	while( n ){
		++ count_1;
		n = n & (n-1);
	}
	return count_1;
}

/*
int main(){
	cout<<"二进制表示中1的个数，请输入整数，输入其他结束测试"<<endl;
	int n;
	while(cin>>n){ //0,1,1,2,3,5,8,13,21，
		cout<<n<<" ==> "<<NumberOf1(n)<<endl;
	}
}
*/